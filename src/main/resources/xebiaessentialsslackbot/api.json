{
  "cards": [
    {
      "name": "acceptance-criteria",
      "category": "testing",
      "title": "Commencez avec des critères d'acceptation\n\n",
      "back": "<p>Les critères d'acceptation devraient être une partie de votre définition de ready. Soyez certain que tout le monde a une compréhension commune  de ce qu'ils sont avant de construire quoi que ce soit.\nEnregistrez vos critères d'acceptation dans des tests automatisés.</p>\n"
    },
    {
      "name": "alone-time",
      "category": "collaboration",
      "title": "Temps seul\n\n",
      "back": "<p>Dans certain cas, le pair programming n'est pas efficace. Soyez prêt à vous autoriser ainsi qu'aux membres de votre équipe du temps seul.</p>\n"
    },
    {
      "name": "apis-are-forever",
      "category": "realisation",
      "title": "Les APIs, comme les diamants, sont éternelles\n\n",
      "back": "<p>Par conséquent développez les avec attention:</p>\n\n<blockquote><ul>\n<li>Les APIs devraient être elle même documentées</li>\n<li>Suivez le principe de l'étonnement minimal</li>\n<li>Utilisez un ordre de paramètres constant à travers les méthodes</li>\n<li>Les APIs devraient être faciles à utiliser, et difficiles à mal utiliser\n<div class=\"attribution\">Joshua Bloch</div></li>\n</ul>\n</blockquote>\n"
    },
    {
      "name": "assertions",
      "category": "realisation",
      "title": "Assurez-vous contre les comportements inappropriés\n\n",
      "back": "<blockquote><p>Si ça ne peut pas arriver, utilisez des assertions pour vous assurez que ça n'arrivera pas.\n<div class=\"attribution\">Andrew Hunt, David Thomas</div></p></blockquote>\n"
    },
    {
      "name": "automate-everything",
      "category": "realisation",
      "title": "Automatisez complétement le processus de livraison et de deploiement\n\n",
      "back": "<p>Le processus de livraison et de déploiement devrait être rapide, fiable and répétable plusieurs fois par jour.</p>\n"
    },
    {
      "name": "boy-scout-rule",
      "category": "realisation",
      "title": "Laissez le camp plus propre que vous ne l'avez trouvé\n\n",
      "back": "<p>Aussi connu comme  la régle du boy-scout. Appliqué à\n la programmation: Toujours vérifier que le code est maintenant plus propre que quand vous l'avez chargé.</p>\n"
    },
    {
      "name": "brutal-transparency",
      "category": "collaboration",
      "title": "Transparence brutale\n\n",
      "back": "<p>La seule façon de construire la vérité est d'être honnête et transparent en toute circonstance.</p>\n"
    },
    {
      "name": "build-it-run-it",
      "category": "collaboration",
      "title": "Vous le buildez, vous l'exécutez !\n\n",
      "back": "<p>L'équipe de développement est responsable de l'application en production.</p>\n\n<blockquote><p>La meilleure façon de complétement automatiser les opérations est que les développeurs soient responsable de l'éxecution de l'application qu'ils développent. [...] Il n'y a pas de séparation en départements opérationnels chez Amazon: vous le buildez; vous l'éxecutez.\n<div class=\"attribution\">Werner Vogels</div></p></blockquote>\n"
    },
    {
      "name": "clean-build",
      "category": "craftsmanship",
      "title": "Gardez le build propre\n\n",
      "back": "<p>Les logs du build devraient raconter un histoire limpide à propos des failures, errors, mais aussi des warnings.</p>\n"
    },
    {
      "name": "clean-logs",
      "category": "testing",
      "title": "Gardez vos logs propre\n\n",
      "back": "<p>Logguez tout ce dont vous avez besoin, mais rien de plus:</p>\n\n<ul>\n<li>Logguez au bon niveau</li>\n<li>Logguez chaque message une seule fois</li>\n<li>Categoriser au besoin</li>\n<li>Lancez des exceptions porteuses de sens</li>\n<li>Ne criez pas au loup</li>\n</ul>\n\n"
    },
    {
      "name": "code-review",
      "category": "collaboration",
      "title": "Revue de code\n\n",
      "back": "<p>Le but premier d'une revue de code est d'augmenter sa qualité. Elle peut être utilisée comme \n un filet de sécurité additionel aux côtés de pair programming.</p>\n\n<p>C'est aussi un bon moyen de partager la connaissance et d'apprendre de nouvelles astuces.</p>\n"
    },
    {
      "name": "comment-with-care",
      "category": "craftsmanship",
      "title": "Commentez avec attention\n\n",
      "back": "<ul>\n<li>Ne commentez pas du mauvais code &ndash; réécrivez le</li>\n<li>Ne répétez pas le code &ndash; clarifiez ses intentions</li>\n<li>Commentez les points surprenants et les solutions de contournement</li>\n<li>Faites en sorte que chaque commentaire compte</li>\n</ul>\n\n"
    },
    {
      "name": "composition-over-inheritance",
      "category": "realisation",
      "title": "Privilégiez la composition à l'héritage\n\n",
      "back": "<p>Aussi connu comme le &lsquo;principe de réutilisation composite&rsquo;. Privilégiez la composition à l'héritage pour faire du polymorphisme.</p>\n"
    },
    {
      "name": "context-over-habit",
      "category": "craftsmanship",
      "title": "Améliorez les pratiques, ne suivez pas juste les habitues\n\n",
      "back": "<p>Avec toutes les &lsquo;meilleures pratiques&rsquo;, principes et expériences, vous devriez\ntoujours garder un oeil sur le contexte: est-ce-que ce qui marche là-bas marche aussi ici et maintent ? Continuez à penser, continuez à chercher.</p>\n"
    },
    {
      "name": "curiosity",
      "category": "craftsmanship",
      "title": "Soyez curieux\n\n",
      "back": "<blockquote><p>Curiouser and curiouser!\n<div class=\"attribution\">Alice in Wonderland</div></p></blockquote>\n\n<p>La curiosité est une des sources principales de créativité.</p>\n"
    },
    {
      "name": "dare-to-say-no",
      "category": "craftsmanship",
      "title": "Osez dire non\n\n",
      "back": "<p>En ingénierie locielle, certaines choses sont juste impossibles. Défendez vos\nvaleurs comme un professionel et refusez de les faire ! Un bon médecin ne promettera pas\nde tout guiérir.</p>\n"
    },
    {
      "name": "definition-of-ready",
      "category": "collaboration",
      "title": "Travaillez sur les stories quand elles sont prêtes\n\n",
      "back": "<p>Ayez une définition de READY pour juger si une user story est apte à aller dans un sprint.</p>\n\n<ul>\n<li>Est-ce que les membres de l'équipe comprennent la story ?</li>\n<li>Est-ce que la story est dimensionnée correctement ?</li>\n<li>Est-ce que les critères d'acceptation ont été définis ?</li>\n<li>Est-ce que les dépendances externes sont en place ?</li>\n<li>A quoi la démo ressemblera ?</li>\n</ul>\n\n"
    },
    {
      "name": "diagnose-before-cure",
      "category": "craftsmanship",
      "title": "Diagnostiquez avant de guérir\n\n",
      "back": "<p>Mesurez en premier, Apportez un changement isolé, recommencez jusqu'à satisfaction.</p>\n\n<p>Avant d'optimiser la performance, mesurez là. Puis corrigez le pire goulot d'étranglement\net mesurez à nouveau. Généralement, vous constaterez que les goulets d'étranglement se déplacent, et que vous êtes plus efficace lorsque vous mesurez en permanence vos progrès.</p>\n"
    },
    {
      "name": "done-is-live",
      "category": "collaboration",
      "title": "Done = Live!\n\n",
      "back": "<p>Le travail de l'équipe de développement est uniquement terminé, quand la feature est en production.</p>\n"
    },
    {
      "name": "done",
      "category": "collaboration",
      "title": "Ce n'est pas fini jusqu'à ce que ce soit fait\n\n",
      "back": "<p>Créez une définition claire de DONE pour avoir un accord ferme sur le fait qu'une tâche soit terminée ou non.</p>\n"
    },
    {
      "name": "dry-principle",
      "category": "craftsmanship",
      "title": "Don't Repeat Yourself\n\n",
      "back": "<blockquote><p>Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n<div class=\"attribution\">Andy Hunt and Dave Thomas</div></p></blockquote>\n"
    },
    {
      "name": "eliminate-waste",
      "category": "collaboration",
      "title": "Eliminate waste\n\n",
      "back": "<p>Sources of waste in software development include:</p>\n\n<ul>\n<li>Partially done work</li>\n<li>Extra features</li>\n<li>Relearning</li>\n<li>Task switching</li>\n<li>Hand-offs</li>\n<li>Delays</li>\n<li>Defects</li>\n</ul>\n\n"
    },
    {
      "name": "exploratory-testing",
      "category": "testing",
      "title": "Make room for exploratory testing\n\n",
      "back": "<p>Following a test script means you're consistent, but predictable.  Exploratory\ntesting reveals the things you hadn't thought to script. Be curious, go outside\nthe beaten path.</p>\n"
    },
    {
      "name": "fail-fast",
      "category": "testing",
      "title": "Fail fast\n\n",
      "back": "<p>Address risks early on in the project. Don't postpone difficult tasks, because\nthey provide you with an opportunity to learn. Tackle them head-on, and get it\nover with.</p>\n"
    },
    {
      "name": "fallacies-distributed-computing",
      "category": "realisation",
      "title": "Remember the fallacies of distributed computing\n\n",
      "back": "<blockquote><ul>\n<li>The network is reliable</li>\n<li>Latency is zero</li>\n<li>Bandwidth is infinite</li>\n<li>The network is secure</li>\n<li>Topology doesn't change</li>\n<li>There is one administrator</li>\n<li>Transport cost is zero</li>\n<li>The network is homogeneous\n<div class=\"attribution\">Peter Deutsch</div></li>\n</ul>\n</blockquote>\n"
    },
    {
      "name": "focus-on-flow",
      "category": "collaboration",
      "title": "Focus on flow\n\n",
      "back": "<p>Focus on banishing costs increases costs.</p>\n\n<p>Focus on flow decreases costs.</p>\n"
    },
    {
      "name": "focused-interfaces",
      "category": "realisation",
      "title": "Write small and focused interfaces\n\n",
      "back": "<p>Also known as the &lsquo;interface segregation principle&rsquo;. Many specific\ninterfaces are better than one combined general interface.</p>\n"
    },
    {
      "name": "genchi-genbutsu",
      "category": "craftsmanship",
      "title": "Find the root cause\n\n",
      "back": "<p>Genchi genbutsu is a Japanese expression for the practice of finding your\nanswers right down at the source.</p>\n\n<p>Don't rely on second-hand reports or tables and charts of data to achieve a\ntrue understanding. Instead go to the place (gemba) where you can watch,\nobserve, and 'ask why five times'.</p>\n"
    },
    {
      "name": "hands-off-machine",
      "category": "realisation",
      "title": "Keep your hands off the machine\n\n",
      "back": "<p>Stop manual changes and automate the installation and configuration of the\nserver: from operating system to middleware and applications.</p>\n"
    },
    {
      "name": "have-fun",
      "category": "collaboration",
      "title": "Have fun\n\n",
      "back": "<p>If it ain't fun, it probably ain't right.</p>\n"
    },
    {
      "name": "hurt-often",
      "category": "collaboration",
      "title": "If it hurts, do it more often\n\n",
      "back": "<p>If any particular task, such as deployment to production, takes inordinate\neffort, force yourself to streamline the process.</p>\n"
    },
    {
      "name": "improve-continuously",
      "category": "craftsmanship",
      "title": "Favor continuous improvement over delayed perfection\n\n",
      "back": "<p>If you don't get better, you get worse.</p>\n\n<blockquote><p>Continuous improvement is not about the things you do well - that's work.\nContinuous improvement is about removing the things that get in the way of your\nwork. The headaches, the things that slow you down, that&rsquo;s what\ncontinuous improvement is all about.\n<div class=\"attribution\">Bruce Hamilton</div></p></blockquote>\n"
    },
    {
      "name": "independent-tests",
      "category": "testing",
      "title": "Tests should be fast, reliable and independent\n\n",
      "back": "<p>Independent unit tests can be run regardless of ordering and are easy to run in parallel. Speed and reliability optimize feedback.</p>\n\n<ul>\n<li>Don't share objects between tests.</li>\n<li>Minimize external dependencies, use mocks.</li>\n<li>Give each test the smallest possible scope.</li>\n<li>Optimize slow tests to make them not slow.</li>\n<li>Optimize flaky tests to make them reliable.</li>\n</ul>\n\n"
    },
    {
      "name": "integrate-early",
      "category": "realisation",
      "title": "Integrate early\n\n",
      "back": "<p>The point where two independently developed modules or systems meet tends to be\nthe locus of problems. Tackle these early on.</p>\n"
    },
    {
      "name": "kiss",
      "category": "realisation",
      "title": "Your solution should not be more complicated than the problem\n\n",
      "back": "<p>Also known as:</p>\n\n<ul>\n<li>The simplest thing that could possibly work</li>\n<li>Keep It Simple, Stupid (KISS)</li>\n<li>Less is more</li>\n<li>You Ain't Gonna Need It (YAGNI)</li>\n</ul>\n\n"
    },
    {
      "name": "learn-a-new-language",
      "category": "craftsmanship",
      "title": "Learn a new language every year\n\n",
      "back": "<p>Learning a new language teaches you new concepts that will benefit you when\nprogramming in your main language.</p>\n"
    },
    {
      "name": "make-it-visible",
      "category": "collaboration",
      "title": "Make it visible\n\n",
      "back": "<p>The most effective way to get a message across is by visualizing it. Use simple\ncharts and diagrams in favor of spreadsheets, and pictures instead of prose.</p>\n"
    },
    {
      "name": "make-it-work-right-fast",
      "category": "craftsmanship",
      "title": "Make it work Make it right Make it fast\n\n",
      "back": "<p>To prevent analysis paralysis, follow these simple steps in case a problem\nseems too big to tackle. First simply make it work. Second, make it right, by\nmaking your code compliant with craftsmanship principles. Finally, make it fast\nif really needed.</p>\n"
    },
    {
      "name": "master-your-tools",
      "category": "craftsmanship",
      "title": "Master your tools\n\n",
      "back": "<p>Expect unprecedented productivity gain when investing time in mastering your tools. Tools will help you to:</p>\n\n<ul>\n<li>Accelerate</li>\n<li>Focus</li>\n<li>Avoid repetitive tasks</li>\n<li>Eliminate duplication</li>\n</ul>\n\n\n<p>Tools include your IDE, commandline tools, desktop tools, editors, etc.</p>\n"
    },
    {
      "name": "maximize-cohesion-minimize-coupling",
      "category": "realisation",
      "title": "Maximize cohesion Minimize coupling\n\n",
      "back": "<p>Maximizing cohesion and minimizing coupling reduces complexity and increases testability.</p>\n"
    },
    {
      "name": "no-anemic-domain-model",
      "category": "realisation",
      "title": "Beware of anemic domain models\n\n",
      "back": "<p>Anemic domain models are data structures without any behaviour. They are a sign\nof poor object-oriented modelling.</p>\n\n<p>Domain-Driven Design (Eric Evans) is an alternative that takes better advantage\nof the object-oriented model's strengths and improves code maintainability.</p>\n"
    },
    {
      "name": "no-blame-no-mercy",
      "category": "collaboration",
      "title": "No blame, but no mercy\n\n",
      "back": "<p>Make mistakes, feel obliged to learn from them.  Look back and learn from what\nyou're doing; actively improve. Criticize bad code, don't criticize people. Fix\nit and share what you've learned.</p>\n"
    },
    {
      "name": "no-broken-builds",
      "category": "collaboration",
      "title": "Sleep easy on a green build\n\n",
      "back": "<p>It's the team's code; it's also the team's responsibility to have a running\nbuild. If the person who broke the build isn't around, that's no excuse.</p>\n"
    },
    {
      "name": "no-broken-windows",
      "category": "collaboration",
      "title": "No broken windows\n\n",
      "back": "<p>If something is broken, then fix it now, otherwise it will come back to haunt\nyou in the future.</p>\n"
    },
    {
      "name": "no-multitasking",
      "category": "craftsmanship",
      "title": "No multitasking\n\n",
      "back": "<p>Doing multiple things at once will lower your productivity instead of raising it.</p>\n\n<p>Try, as much as possible, to focus on one thing at a time.</p>\n\n<p>To do great work, you need great focus.</p>\n"
    },
    {
      "name": "no-museum",
      "category": "craftsmanship",
      "title": "Prevent your code base from turning into a museum\n\n",
      "back": "<p>There is no point in keeping dead code lying around in your code base. Get rid\nof it. Your version history will always allow you to get it back if you need\nto. The same goes for commented-out code: get rid of it.</p>\n\n<p>Keeping your codebase free of reminiscences of the past will make it easier to\nnavigate and understand.</p>\n"
    },
    {
      "name": "no-test-no-bugfix",
      "category": "craftsmanship",
      "title": "No change without a failing test\n\n",
      "back": "<ul>\n<li>Don't fix a bug before you have a broken test</li>\n<li>A feature is only considered done once you have tests for it</li>\n<li>Don't refactor before you have sufficient test coverage</li>\n</ul>\n\n"
    },
    {
      "name": "non-functionals",
      "category": "realisation",
      "title": "Deal with non-functionals\n\n",
      "back": "<p>Work all your non-functional requirements into goals on a clearly defined scale\nand put them on the backlog, either as part of the 'definition of done' or as\nseparate user stories.</p>\n"
    },
    {
      "name": "one-change-at-a-time",
      "category": "craftsmanship",
      "title": "One change at a time\n\n",
      "back": "<p>A single commit should be consistent and contain only changes related to a\nsingle user story/issue.  For instance, don't mix formatting changes with bug\nfixes.</p>\n"
    },
    {
      "name": "one-feature-at-a-time",
      "category": "collaboration",
      "title": "One feature at a time\n\n",
      "back": "<p>First complete what you started before starting something new. It decreases\ntime to market and allows you to apply experience gained during development of\nthe first feature in the development of the next one.</p>\n"
    },
    {
      "name": "pair-programming",
      "category": "collaboration",
      "title": "Pair programming\n\n",
      "back": "<p>Pairing improves focus and fosters collective ownership more effectively than\ngroup discussions, documentation and reviews.</p>\n"
    },
    {
      "name": "poutsma-principle",
      "category": "realisation",
      "title": "If something is too complex to understand, it must be wrong\n\n",
      "back": "<p>...and it's your job to prove it wrong. Also known as the &lsquo;Poutsma Principle&rsquo;.</p>\n"
    },
    {
      "name": "readable-code",
      "category": "craftsmanship",
      "title": "Write code that humans can easily understand\n\n",
      "back": "<blockquote><p>Any fool can write code that a computer can understand. Good programmers write\ncode that humans can understand.  A simple, readable implementation is head and\nshoulders above a clever-but-confusing, look-at-me implementation.  Things to\nkeep in mind are readability, maintainability and speed of development.\n<div class=\"attribution\">Martin Fowler</div></p></blockquote>\n"
    },
    {
      "name": "rich-communication",
      "category": "craftsmanship",
      "title": "Prefer rich modes of communication\n\n",
      "back": "<ul>\n<li>Personal conversation over telephone call</li>\n<li>Telephone call over chat</li>\n<li>Chat over email</li>\n<li>Email over voice mail</li>\n</ul>\n\n"
    },
    {
      "name": "run-tests-automatically",
      "category": "testing",
      "title": "Run tests automatically\n\n",
      "back": "<p>Starting tests by hand is needless friction. Don't just use a build server.\nUse an IDE plugin that tracks source/test dependency and runs the affected\ntests whenever you save a file.</p>\n"
    },
    {
      "name": "secure-development",
      "category": "realisation",
      "title": "Develop for security\n\n",
      "back": "<p>You can't successfully add security to an existing insecure system. Consider\nsecurity requirements during all steps of your development process.</p>\n"
    },
    {
      "name": "separation-of-concerns",
      "category": "realisation",
      "title": "Separation of concerns\n\n",
      "back": "<blockquote><p>Separate a program into non-overlapping concerns.\n<div class=\"attribution\">Edsger W. Dijkstra</div></p></blockquote>\n"
    },
    {
      "name": "shared-design-understanding",
      "category": "realisation",
      "title": "Share the design\n\n",
      "back": "<p>Everyone in the team should be aware of the core design ideas that have given\nshape and structure to the software so far, and understand the underlying\nintent.</p>\n"
    },
    {
      "name": "small-increments",
      "category": "craftsmanship",
      "title": "Work in small increments\n\n",
      "back": "<p>Every commit should be a change from one stable state of the system to another\nstable state of the system, and should not represent more than two hours of\nwork.</p>\n"
    },
    {
      "name": "tdd-shapes-design",
      "category": "testing",
      "title": "Test Driven Development shapes design\n\n",
      "back": "<p>Well-structured code follows naturally from the test-driven development (TDD) process.</p>\n\n<p>However, locally emergent architecture without an overall vision can become\nincoherent in the large.</p>\n"
    },
    {
      "name": "team-member-equality",
      "category": "collaboration",
      "title": "Judge on content, not on authority\n\n",
      "back": "<p>We distinguish on the validity of the ideas, not on roles, authority or\nlocation.</p>\n"
    },
    {
      "name": "team-rhythm",
      "category": "collaboration",
      "title": "Get the team in a rhythm\n\n",
      "back": "<p>A team that works according to a defined heartbeat is much more effective since\nit doesn't waste time organizing meetings or spend time thinking about and\nplanning what to do when.</p>\n"
    },
    {
      "name": "test-code-one",
      "category": "testing",
      "title": "Le code et les tests forment un tout\n\n",
      "back": "<blockquote><p>Quand vous écrivez du code, pensez aux tests.\nEn écrivant le test, pensez au code.\nQuand vous pensez au code et aux tests en même temps, le fait de tester est facile et le code est beau.\n<div class=\"attribution\">Testivus</div></p></blockquote>\n"
    },
    {
      "name": "test-everything",
      "category": "testing",
      "title": "Quand vous n'avez pas le temps de tout tester, c'est que vous en faites trop\n\n",
      "back": "<p>Quand une story n'est pas testée, cela implique que ce n'est pas prêt pour la production.  Cela signifie que les tests devrait être au centre de l'attention au cours du sprint par toute l'équipe.  Aucun nouveau travail devrait être choisi si il reste des tests à écrire.</p>\n"
    },
    {
      "name": "testing-is-shared-responsibility",
      "category": "testing",
      "title": "Les tests sont une responsabilité partagée\n\n",
      "back": "<p>Tester ne fait pas parti que du domaine du testeur, mais une valeur profonde de l'équipe de développement. Chaque développeur est avant tout un testeur.</p>\n"
    },
    {
      "name": "tests-are-specs",
      "category": "testing",
      "title": "Les tests sont des Specifications\n\n",
      "back": "<p>Ne testez pas une implémentation, testez que c'est conforme à un comportement.\nLes tests écrits de cette façon deviennent des specs exécutables, des stories et des examples. Ils documentent ce que le code est supposé faire, ils ne figent pas dans le ciment comment ils le font.</p>\n"
    },
    {
      "name": "the-zone",
      "category": "collaboration",
      "title": "Respectez &lsquo;la zone&rsquo;\n\n",
      "back": "<p>&lsquo;La zone&rsquo; est un mode de conscience qui est associée à des capacités plus élevées. Quand les développeurs sont dans la zone, il sont plus productifs.</p>\n\n<p>Quand un développeur est dans la zone, évitez de le perturber.</p>\n"
    },
    {
      "name": "thirty-minute-methods",
      "category": "realisation",
      "title": "Découpez les fonctionalités le plus unitairement possible\n\n",
      "back": "<p>Une fonction devrait être remplacée par un de vos collègues en moins de trente minutes.</p>\n"
    },
    {
      "name": "thread-safe",
      "category": "realisation",
      "title": "Visez le Thread-Safe\n\n",
      "back": "<p>Dans l'ordre décroissant de la sûreté:</p>\n\n<ul>\n<li>Les services Stateless</li>\n<li>Etats partagés immutables</li>\n<li>Locks encapsulés</li>\n<li>Non thread safe</li>\n</ul>\n\n"
    },
    {
      "name": "three-strikes",
      "category": "craftsmanship",
      "title": "Trois fois et vous automatisez\n\n",
      "back": "<ul>\n<li>La première fois que vous faites quelque chose, faites le manuellement</li>\n<li>La deuxième fois, faites quelque chose de similaire, vous serez embêté par la répétition, mais faites le malgré tout</li>\n<li>La troisième fois, automatisez-le</li>\n</ul>\n\n"
    },
    {
      "name": "time-for-tech-debt",
      "category": "craftsmanship",
      "title": "Prenez le temps de combler la dette technique\n\n",
      "back": "<p>Faites comprendre à votre Product Owner en quoi il est critique de combler une dette technique. Expliquez que c'est le seul moyen d'accéder à la durabilité.</p>\n"
    },
    {
      "name": "timebox",
      "category": "collaboration",
      "title": "Limitez dans le temps l'inconnu\n\n",
      "back": "<ul>\n<li>Limitez dans le temps (Timebox) une Story ou une Task qui n'a pas pu être estimée durant le planning.</li>\n<li>Communiquer les résultats au Product Owner / Scrum Master pour avoir des estimations précises.</li>\n<li>Vous devez rester dans les limites de temps de cette Timebox.</li>\n</ul>\n\n"
    },
    {
      "name": "two-minute-rule",
      "category": "craftsmanship",
      "title": "Si vous êtes bloqué quand vous développez pendant plus de deux minutes, vous DEVEZ en parler avec quelqu'un d'autre\n\n",
      "back": "<p>Ce n'est pas professionnel de perdre du temps à essayer de résoudre un problème par vous même qui serait plus rapide à résoudre à l'aide de quelqu'un.</p>\n\n<p>Vous savez que vous êtes bloqué quand vous ne savez plus quoi tapper dans Google.</p>\n"
    },
    {
      "name": "what-you-measure",
      "category": "collaboration",
      "title": "Vous obtenez ce que vous mesurez\n\n",
      "back": "<p>Les métriques sont utiles, mais attention à ne pas s'enfermer sur sa propre vision. Si vous vous focalisez exclusivement sur certains critères de qualité (comme la couverture de code), les autres critères peuvent en patir.</p>\n\n<p>Cet effet peut être amplifié quand la carotte et le bâton sont impliqués, comme quand la direction impose un pourcentage de code coverage par exemple.</p>\n"
    }
  ],
  "categories": [
    {
      "name": "craftsmanship",
      "colour": "#F80068"
    },
    {
      "name": "collaboration",
      "colour": "#FC7A25"
    },
    {
      "name": "realisation",
      "colour": "#107FD5"
    },
    {
      "name": "testing",
      "colour": "#6DC726"
    },
    {
      "name": "other",
      "colour": "#4C2F5C"
    }
  ],
  "mailto": "essentials@xebia.com",
  "url": "//essentials.xebia.com",
  "name": "Xebia Essentials",
  "description": "The Xebia Essentials is a deck of flash cards about software craftsmanship.",
  "timestamp": "2015-08-29 21:24:58 +0200",
  "enableCustomerSupport": true
}